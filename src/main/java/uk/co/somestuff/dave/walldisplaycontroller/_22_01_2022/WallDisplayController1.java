package uk.co.somestuff.dave.walldisplaycontroller._22_01_2022;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.4.1
 * 2022-01-23T16:02:28.727Z
 * Generated source version: 3.4.1
 *
 */
@WebServiceClient(name = "WallDisplayController1",
                  wsdlLocation = "https://dave.somestuff.co.uk/WebServices/WallDisplayController/wdcws1.asmx?WSDL",
                  targetNamespace = "http://dave.somestuff.co.uk/WallDisplayController/22-01-2022")
public class WallDisplayController1 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://dave.somestuff.co.uk/WallDisplayController/22-01-2022", "WallDisplayController1");
    public final static QName WallDisplayController1Soap12 = new QName("http://dave.somestuff.co.uk/WallDisplayController/22-01-2022", "WallDisplayController1Soap12");
    public final static QName WallDisplayController1Soap = new QName("http://dave.somestuff.co.uk/WallDisplayController/22-01-2022", "WallDisplayController1Soap");
    static {
        URL url = null;
        try {
            url = new URL("https://dave.somestuff.co.uk/WebServices/WallDisplayController/wdcws1.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WallDisplayController1.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://dave.somestuff.co.uk/WebServices/WallDisplayController/wdcws1.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public WallDisplayController1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WallDisplayController1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WallDisplayController1() {
        super(WSDL_LOCATION, SERVICE);
    }

    public WallDisplayController1(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WallDisplayController1(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WallDisplayController1(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns WallDisplayController1Soap
     */
    @WebEndpoint(name = "WallDisplayController1Soap12")
    public WallDisplayController1Soap getWallDisplayController1Soap12() {
        return super.getPort(WallDisplayController1Soap12, WallDisplayController1Soap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WallDisplayController1Soap
     */
    @WebEndpoint(name = "WallDisplayController1Soap12")
    public WallDisplayController1Soap getWallDisplayController1Soap12(WebServiceFeature... features) {
        return super.getPort(WallDisplayController1Soap12, WallDisplayController1Soap.class, features);
    }


    /**
     *
     * @return
     *     returns WallDisplayController1Soap
     */
    @WebEndpoint(name = "WallDisplayController1Soap")
    public WallDisplayController1Soap getWallDisplayController1Soap() {
        return super.getPort(WallDisplayController1Soap, WallDisplayController1Soap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WallDisplayController1Soap
     */
    @WebEndpoint(name = "WallDisplayController1Soap")
    public WallDisplayController1Soap getWallDisplayController1Soap(WebServiceFeature... features) {
        return super.getPort(WallDisplayController1Soap, WallDisplayController1Soap.class, features);
    }

}
